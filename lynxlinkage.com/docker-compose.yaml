services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
    command:
      - "--api.dashboard=true" # Enable Traefik dashboard
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # Don't expose all containers automatically
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - lynk
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik-dashboard.middlewares=authelia"

  authelia:
    image: authelia/authelia
    container_name: authelia
    volumes:
      - ./authelia:/config
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authelia.rule=Host(`auth.${DOMAIN}`)'
      - 'traefik.http.routers.authelia.entrypoints=websecure'
      - 'traefik.http.routers.authelia.tls=true'
      - 'traefik.http.routers.authelia.tls.certresolver=myresolver'
      - 'traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://auth.${DOMAIN}'
      - 'traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'
    expose:
      - 9091
    restart: unless-stopped
    environment:
      - TZ=Asia/Taipei
    networks:
      - lynk

  fugle-fastapi:
    image: yitech/fugle-fastapi:latest
    container_name: fastapi
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./fugle-fastapi/credentials/cryptfile_pass.cfg:/root/.local/share/python_keyring/cryptfile_pass.cfg:ro
      - ./fugle-fastapi/config.ini:/app/config.ini:ro
      - ./fugle-fastapi/cert.p12:/app/cert.p12:ro
      - ./fugle-fastapi/.env:/app/.env:ro
    networks:
      - lynk
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`fugle.${DOMAIN}`)"
      - "traefik.http.routers.fastapi.entrypoints=websecure"
      - "traefik.http.routers.fastapi.tls.certresolver=myresolver"
  
  postgres:
    image: postgres:16.2
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: lynxlinkage
      POSTGRES_USER: bullionbear
      POSTGRES_PASSWORD: Sunshine4Jellybean
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lynk
      - loki
    ports:
      - "5432:5432"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`postgres.${DOMAIN}`)"
      - "traefik.http.routers.fastapi.entrypoints=websecure"
      - "traefik.http.routers.fastapi.tls.certresolver=myresolver"

  grafana:
    image: grafana/grafana:9.1.6
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./o11y/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./o11y/grafana.ini:/etc/grafana/grafana.ini
      - grafana_data:/var/lib/grafana
    networks:
      - lynk
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"

  prometheus:
    image: prom/prometheus:v2.27.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      [
        '--log.level=debug',
        '--config.file=/etc/prometheus/prometheus.yml',
        '--enable-feature=remote-write-receiver',
        '--query.lookback-delta=30s'
      ]
    networks:
      - lynk
      - loki
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=myresolver"

  init:
    image: grafana/loki:2.9.2
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/loki"
    volumes:
      - ./loki:/loki
    networks:
      - loki

  log-generator:
    image: mingrammer/flog
    command:
      - --loop
      - --format=json
      - --number=10 # number of log lines to generate per second
      - --delay=100ms # delay between log lines
      - --output=/var/log/generated-logs.txt
      - --overwrite
      - --type=log
    volumes:
      - ./loki/:/var/log/
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ./loki/:/var/log/
      - ./o11y:/etc/promtail/
    ports:
      - "9080:9080"
    command: -config.file=/etc/promtail/promtail.yaml
    networks:
      - loki

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler &&
        minio server --address "0.0.0.0:9000" --console-address "0.0.0.0:9001" /data
    environment:
      - MINIO_ROOT_USER=yite
      - MINIO_ROOT_PASSWORD=htfpi7jg
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./.data/minio:/data
    networks:
      - loki

  loki-gateway:
    image: nginx:1.27
    volumes:
      - ./o11y/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
      - "3100"
    networks:
      - loki

  loki-read:
    image: grafana/loki:2.9.2
    volumes:
      - ./o11y:/etc/loki/
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/loki.yaml -target=read -legacy-read-mode=false"
    networks:
      - loki
    restart: always
    deploy:
      mode: replicated
      replicas: 3

  loki-write:
    image: grafana/loki:2.9.2
    volumes:
      - ./o11y:/etc/loki/
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/loki.yaml -target=write"
    networks:
      - loki
    restart: always
    deploy:
      mode: replicated
      replicas: 3

  loki-backend:
    image: grafana/loki:2.9.2
    volumes:
      - ./o11y:/etc/loki/
      - ./rules:/loki/rules:ro
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/loki.yaml -target=backend -legacy-read-mode=false"
    networks:
      - loki
    restart: always
    deploy:
      mode: replicated
      replicas: 3

  alertmanager:
    image: prom/alertmanager:v0.23.0
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - "./o11y:/config"
      - alertmanager_data:/data
    command: --config.file=/config/alertmanager.yml --log.level=debug
    networks:
      - loki
networks:
  lynk:
  loki:

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:
  alertmanager_data:
